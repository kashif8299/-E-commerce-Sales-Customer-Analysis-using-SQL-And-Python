use dataset;
SELECT
    order_id,
    order_status,
    order_delivered_customer_date
FROM
 orders
WHERE
    order_delivered_customer_date IS NULL;
    
    
    -- SQL: Count orders by status
SELECT
    order_status,
    COUNT(order_id) AS num_orders
FROM
    dataset.orders
GROUP BY
    order_status
ORDER BY
    num_orders DESC;
    -- List all unique citites where customer are located 
    
    SELECT COUNT(DISTINCT customer_city) AS unique_city_count
FROM dataset.Customers;

-- Count the number of orders placed in 2017
SELECT
    COUNT(order_id) AS orders_in_2017
FROM
    dataset.orders
WHERE
    EXTRACT(YEAR FROM order_purchase_timestamp) = 2017;
    
    
    -- find the total sales per country
    
    SELECT
    c.customer_state AS country_or_state,
    SUM(p.payment_value) AS total_sales
FROM
    dataset.orders AS o
JOIN
    dataset.payments AS p ON o.order_id = p.order_id
JOIN
    dataset.customers AS c ON o.customer_id = c.customer_id
GROUP BY
    c.customer_state
ORDER BY
    total_sales DESC;
    
    -- Calculate the percentage of Order that were Paid in installment
    
    SELECT
    COUNT(DISTINCT order_id) AS orders_in_installments
FROM
    dataset.payments
WHERE
    payment_installments > 1; 
    
    
    -- Count the number of customers from each State.
    
    SELECT
    customer_state,
    COUNT(customer_unique_id) AS number_of_customers 
FROM
    dataset.Customers
GROUP BY
    customer_state
ORDER BY
    number_of_customers DESC;
    
    -- Intermediate Question 
    -- Calculate the number of orders per month in 2018
SELECT
    DATE_FORMAT(order_purchase_timestamp, '%Y-%m') AS order_month,
    COUNT(order_id) AS number_of_orders
FROM
    orders
WHERE
    YEAR(order_purchase_timestamp) = 2018
GROUP BY
    order_month
ORDER BY
    order_month;
    
    -- 2. Find the average number of product per order,grouped by customer city.
    
    SELECT
    c.customer_city,
    AVG(item_counts.number_of_products) AS average_products_per_order
FROM
    customers AS c
JOIN
    orders AS o ON c.customer_id = o.customer_id
JOIN (
    SELECT
        order_id,
        COUNT(product_id) AS number_of_products
    FROM
        order_items
    GROUP BY
        order_id
) AS item_counts ON o.order_id = item_counts.order_id
GROUP BY
    c.customer_city
ORDER BY
    c.customer_city;
    -- 3. calculate the percentage of total revenue contributed by each product category.
    WITH CategoryRevenue AS (
    SELECT
        p.`product category`,
        SUM(oi.price) AS category_total_revenue
    FROM
        order_items AS oi
    JOIN
        products AS p ON oi.product_id = p.product_id
    GROUP BY
        p.`product category`
),
TotalRevenue AS (
    SELECT
        SUM(price) AS overall_total_revenue
    FROM
        order_items
)
SELECT
    cr.`product category`,
    cr.category_total_revenue,
    (cr.category_total_revenue * 100.0 / tr.overall_total_revenue) AS percentage_contribution
FROM
    CategoryRevenue AS cr,
    TotalRevenue AS tr
ORDER BY
    percentage_contribution DESC;
    
    -- 4. Identify the correlation between product price and the number of times a product has been purchased.
    SELECT
    oi.product_id,
    AVG(oi.price) AS average_product_price,
    COUNT(oi.order_item_id) AS purchase_count
FROM
    order_items AS oi
GROUP BY
    oi.product_id
ORDER BY
    purchase_count DESC;
    
    -- 5. Calculate the total revenue generated by each seller, and rank them by revenue.
    SELECT
    oi.seller_id,
    SUM(oi.price) AS total_revenue
FROM
    order_items AS oi
GROUP BY
    oi.seller_id
ORDER BY
    total_revenue DESC;
    
    
    
    -- Advanced Problem :-
    # 1. Calculate the moving average of order values for each customer over thier order  history. 
    WITH CustomerOrderValues AS (
    SELECT
        o.customer_id,
        o.order_purchase_timestamp,
        SUM(p.payment_value) AS order_value
    FROM
        orders AS o
    JOIN
        payments AS p ON o.order_id = p.order_id
    GROUP BY
        o.customer_id, o.order_id, o.order_purchase_timestamp
)
SELECT
    cov.customer_id,
    cov.order_purchase_timestamp,
    cov.order_value,
    AVG(cov.order_value) OVER (
        PARTITION BY cov.customer_id
        ORDER BY cov.order_purchase_timestamp
        ROWS BETWEEN 2 PRECEDING AND CURRENT ROW
    ) AS moving_average_order_value
FROM
    CustomerOrderValues AS cov
ORDER BY
    cov.customer_id, cov.order_purchase_timestamp;
    
    # 2. Calcuated the cumulative sales per month for each year.
    WITH MonthlySales AS (
    SELECT
        YEAR(o.order_purchase_timestamp) AS sale_year,
        DATE_FORMAT(o.order_purchase_timestamp, '%m') AS sale_month,
        SUM(p.payment_value) AS monthly_revenue
    FROM
        orders AS o
    JOIN
        payments AS p ON o.order_id = p.order_id
    GROUP BY
        sale_year, sale_month
)
SELECT
    ms.sale_year,
    ms.sale_month,
    ms.monthly_revenue,
    SUM(ms.monthly_revenue) OVER (
        PARTITION BY ms.sale_year
        ORDER BY ms.sale_month
    ) AS cumulative_sales
FROM
    MonthlySales AS ms
ORDER BY
    ms.sale_year, ms.sale_month;
    
    # 3. Calculate the year-over-year growth rate of Total sales.
    WITH AnnualSales AS (
    SELECT
        YEAR(o.order_purchase_timestamp) AS sale_year,
        SUM(p.payment_value) AS annual_sales
    FROM
        orders AS o
    JOIN
        payments AS p ON o.order_id = p.order_id
    GROUP BY
        sale_year
)
SELECT
    current_year.sale_year,
    current_year.annual_sales,
    LAG(current_year.annual_sales, 1) OVER (ORDER BY current_year.sale_year) AS previous_year_sales,
    (current_year.annual_sales - LAG(current_year.annual_sales, 1) OVER (ORDER BY current_year.sale_year)) * 100.0 / LAG(current_year.annual_sales, 1) OVER (ORDER BY current_year.sale_year) AS year_over_year_growth_rate
FROM
    AnnualSales AS current_year
ORDER BY
    current_year.sale_year;
    
    # 4. Calculate the retention rate of customers, defined as the percentage of customer who make another purchase within 6 months of their first purchase. 
    WITH CustomerFirstPurchase AS (
    SELECT
        customer_id,
        MIN(STR_TO_DATE(order_purchase_timestamp, '%Y-%m-%d %H:%M:%S')) AS first_purchase_date
    FROM
        orders
    GROUP BY
        customer_id
),
RetainedCustomers AS (
    SELECT DISTINCT
        cfp.customer_id
    FROM
        CustomerFirstPurchase AS cfp
    JOIN
        orders AS o ON cfp.customer_id = o.customer_id
    WHERE
        STR_TO_DATE(o.order_purchase_timestamp, '%Y-%m-%d %H:%M:%S') > cfp.first_purchase_date
        AND TIMESTAMPDIFF(MONTH, cfp.first_purchase_date, STR_TO_DATE(o.order_purchase_timestamp, '%Y-%m-%d %H:%M:%S')) <= 6
)
SELECT
    (COUNT(DISTINCT rc.customer_id) * 100.0 / (SELECT COUNT(DISTINCT customer_id) FROM orders)) AS retention_rate_percentage
FROM
    RetainedCustomers AS rc;
    # 5. Identify the top 3 customers who spent the most money in each year. 
    WITH CustomerAnnualSpending AS (
    SELECT
        o.customer_id,
        YEAR(o.order_purchase_timestamp) AS sale_year,
        SUM(p.payment_value) AS total_spent
    FROM
        orders AS o
    JOIN
        payments AS p ON o.order_id = p.order_id
    GROUP BY
        o.customer_id, sale_year
),
RankedCustomerSpending AS (
    SELECT
        customer_id,
        sale_year,
        total_spent,
        RANK() OVER (PARTITION BY sale_year ORDER BY total_spent DESC) AS rnk
    FROM
        CustomerAnnualSpending
)
SELECT
    customer_id,
    sale_year,
    total_spent
FROM
    RankedCustomerSpending
WHERE
    rnk <= 3
ORDER BY
    sale_year, rnk;
    
    
    
    
    